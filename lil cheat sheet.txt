Here’s a **Data Structures (Gagnaskipan) Final Exam Cheat Sheet** tailored for your **T-201-GSKI** course with the **Fall 2023** exam style in mind.

---

# 📘 GAGNASKIPAN FINAL EXAM CHEAT SHEET  
**T-201-GSKI | Data Structures | Teacher: Friðrik S. Tómasson**

---

## 🧠 **Big-O Time Complexity Quick Reference**

| Operation                          | Time Complexity |
|------------------------------------|-----------------|
| Access in ArrayList                | O(1)            |
| Insert/Delete at end (ArrayList)  | O(1) *amortized*|
| Insert/Delete at front (ArrayList)| O(n)            |
| Resize ArrayList                   | O(n)            |
| Insert/Delete at front (DLL/SLL)  | O(1)            |
| Search in SLL/DLL                  | O(n)            |
| HashMap ops (good hash)           | O(1)            |
| BST Search (balanced)             | O(log n)        |
| BST Insert/Delete (balanced)      | O(log n)        |
| BST Worst Case (unbalanced)       | O(n)            |
| Binary Heap Insert/Delete         | O(log n)        |

---

## 🌲 **Trees**

### Binary Search Tree (BST):
- **Left < Node < Right**
- Operations (Insert, Search, Delete):  
  - Average: O(log n)  
  - Worst: O(n)  
- **Delete**:
  - No child → Remove
  - One child → Bypass
  - Two children → Replace with in-order successor

### Binary Heap (Min/Max):
- **Remove()** returns **min/max** element
- Insert/Remove: O(log n)
- Maintains **complete binary tree** structure

---

## 🧩 **Linked Lists**

### Singly Linked List (SLL):
- Insert/Delete at front: O(1)
- Insert/Delete at back: O(n)
- Length (Recursive):
```python
def Length(head):
    if not head:
        return 0
    return 1 + Length(head.next)
```

### Doubly Linked List (DLL):
- Header/Trailer dummy nodes
- Insert/Delete at front/back: O(1)
- `push_back(value)`:
```python
def push_back(self, value):
    new_node = DLL_Node(value)
    last = self.trailer.prev
    last.next = new_node
    new_node.prev = last
    new_node.next = self.trailer
    self.trailer.prev = new_node
```
- `ContainsValue(value)`:
```python
def ContainsValue(self, value):
    current = self.header.next
    while current != self.trailer:
        if current.data == value:
            return True
        current = current.next
    return False
```

---

## 📦 **ArrayList**

### Resize:
```python
def resize(self):
    self.capacity *= 2
    new_arr = [None] * self.capacity
    for i in range(self.size):
        new_arr[i] = self.arr[i]
    self.arr = new_arr
```

### Prepend:
```python
def prepend(self, value):
    if self.size == self.capacity:
        self.resize()
    for i in range(self.size, 0, -1):
        self.arr[i] = self.arr[i - 1]
    self.arr[0] = value
    self.size += 1
```

---

## 🧠 **SLL Recursion: `nth_from_end`**
```python
def nth_from_end(head, n):
    def helper(node):
        if node is None:
            return 0, None
        index, result = helper(node.next)
        if index == n:
            return index + 1, node
        return index + 1, result
    _, target = helper(head)
    return target.data if target else None
```

---

## 🌳 **Sentence Tree**

```python
class TreeNode:
    def __init__(self, word=""):
        self.word = word
        self.children = {}

class SentenceTree:
    def __init__(self):
        self.root = TreeNode()

    def store_sentence(self, sentence):
        node = self.root
        for word in sentence.split():
            if word not in node.children:
                node.children[word] = TreeNode(word)
            node = node.children[word]

    def contains_sentence(self, sentence):
        node = self.root
        for word in sentence.split():
            if word not in node.children:
                return False
            node = node.children[word]
        return True
```

---

## 🎯 **Quick Tips for MCQ**

1. **Time complexity from fast → slow**:  
   ✅ `O(1) < O(log n) < O(n) < O(n^2)`

2. **BST**:  
   ✅ All given options in the MCQ are TRUE → pick "The other options are all True"

3. **Binary Heap remove()**:  
   ✅ Returns smallest/largest item (depending on min/max heap)

4. **DLL insert/remove at front**:  
   ✅ O(1)

5. **HashMap with good distribution**:  
   ✅ O(1)

6. **ArrayList insert at front**:  
   ✅ O(n)

7. **BST Preorder last node printed**:  
   ✅ Farthest right node

8. **SLL insert/remove at front**:  
   ✅ O(1)

9. **HashMap vs BST (balanced)**:  
   ✅ HashMap = O(1), BST = O(log n)

---

Let me know if you want a printable PDF version or flashcards!




Ah gotcha — you're asking for a **general, condensed cheat sheet for the entire Data Structures course**, not just for one exam question. Here's a **one-page style master cheat sheet** with **key data structures**, **common operations**, and **complexities**, ideal for quick recall before or during the exam.

---

# 📘 DATA STRUCTURES MASTER CHEAT SHEET  
**T-201-GSKI | Fall 2023 | Final Exam Prep**

---

## ⏱ TIME COMPLEXITY REFERENCE

| Operation                    | ArrayList | SLL / DLL | Stack/Queue | BST (avg) | BST (worst) | Heap     | HashMap  |
|-----------------------------|-----------|-----------|-------------|-----------|-------------|----------|----------|
| Access                      | O(1)      | O(n)      | O(n)        | O(log n)  | O(n)        | O(1)     | O(1)     |
| Insert at End               | O(1)*     | O(n)      | O(1)        | O(log n)  | O(n)        | O(log n) | O(1)     |
| Insert at Front             | O(n)      | O(1)      | O(1)        | -         | -           | -        | -        |
| Delete from Front           | O(n)      | O(1)      | O(1)        | O(log n)  | O(n)        | O(log n) | O(1)     |
| Search                      | O(n)      | O(n)      | O(n)        | O(log n)  | O(n)        | O(n)     | O(1)     |

\* = Amortized O(1) for dynamic arrays like Python lists.

---

## 🔗 LINKED LISTS

### Singly Linked List (SLL)
- Each node: `data`, `next`
- Efficient insert/remove at front: O(1)
- Traverse: O(n)

### Doubly Linked List (DLL)
- Each node: `data`, `prev`, `next`
- Fast insert/remove at front/back: O(1)
- Uses header/trailer sentinels

---

## 📚 STACK / QUEUE

### Stack (LIFO)
- push(), pop(), peek()
- Can be built with list or linked list

### Queue (FIFO)
- enqueue(), dequeue(), peek()
- CircularQueue used for O(1) operations

---

## 🧱 ARRAYLIST (Dynamic Array)
- Fast access O(1), slow insert at front O(n)
- Doubles in size when full
- Insert/append: O(1)*, insert front: O(n)

---

## 🌲 BINARY SEARCH TREE (BST)

- Left < Node < Right
- Inorder Traversal = Sorted output
- Insert/Search/Delete:
  - Balanced: O(log n)
  - Unbalanced: O(n)
- Deletion: handle 0, 1, or 2 children

---

## ⛏ BINARY HEAP (Min/Max Heap)

- Complete binary tree stored in array
- Min-heap: parent ≤ children
- Insert: O(log n) (bubble up)
- remove(): O(log n) (bubble down)

---

## 📦 HASHMAP / DICTIONARY

- Uses hash function for key indexing
- Good hash = O(1) average-case for insert/search/delete
- Collisions handled with chaining or open addressing

---

## 📜 TRAVERSALS (Trees)

| Type      | Order                          |
|-----------|--------------------------------|
| Inorder   | Left → Root → Right            |
| Preorder  | Root → Left → Right            |
| Postorder | Left → Right → Root            |
| Level-Order | BFS using queue              |

---

## 🧠 RECURSION PATTERN (SLL example)

```python
def nth_from_end(head, n):
    def helper(node):
        if not node: return 0, None
        index, result = helper(node.next)
        return index + 1, node if index == n else result
    _, node = helper(head)
    return node.data if node else None
```

---

## 🌳 SENTENCE TREE PATTERN

```python
class TreeNode:
    def __init__(self, word=""):
        self.word = word
        self.children = {}

class SentenceTree:
    def __init__(self): self.root = TreeNode()

    def store_sentence(self, sentence):
        node = self.root
        for word in sentence.split():
            if word not in node.children:
                node.children[word] = TreeNode(word)
            node = node.children[word]

    def contains_sentence(self, sentence):
        node = self.root
        for word in sentence.split():
            if word not in node.children:
                return False
            node = node.children[word]
        return True
```

---

## ✅ COMMON PATTERNS TO REMEMBER

- **Recursive SLL**: base case first, return index/info
- **Tree insert/search**: loop/recursively navigate children
- **ArrayList resize**: copy to new array of double size
- **BST delete**: use in-order successor if 2 children
- **HashMap**: define custom hash function + chaining

---

Let me know if you'd like:
- A printable version (PDF or PNG)
- Flashcard set
- Interactive practice quiz
- Code templates for reuse during coding sections

🔥 You've got this! Want a mock test next?
