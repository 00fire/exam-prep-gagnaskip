üìù Basic Operations on Linked Lists
Singly Linked List (SLL)
Node Definition

python
Copy
Edit
class SLL_Node:
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next
Create Singly Linked List

python
Copy
Edit
class SLL:
    def __init__(self):
        self.head = None
Insert at the Front (Prepend)

python
Copy
Edit
def prepend(self, value):
    new_node = SLL_Node(value)
    new_node.next = self.head
    self.head = new_node
Insert at the End (Append)

python
Copy
Edit
def append(self, value):
    new_node = SLL_Node(value)
    if not self.head:
        self.head = new_node
        return
    current = self.head
    while current.next:
        current = current.next
    current.next = new_node
Remove from Front

python
Copy
Edit
def remove_front(self):
    if self.head:
        self.head = self.head.next
Length of the List (Iterative)

python
Copy
Edit
def length(self):
    count = 0
    current = self.head
    while current:
        count += 1
        current = current.next
    return count
Find Value

python
Copy
Edit
def find(self, value):
    current = self.head
    while current:
        if current.data == value:
            return True
        current = current.next
    return False
Doubly Linked List (DLL)
Node Definition

python
Copy
Edit
class DLL_Node:
    def __init__(self, data=None, prev=None, next=None):
        self.data = data
        self.prev = prev
        self.next = next
Create Doubly Linked List (Deque)

python
Copy
Edit
class DLL:
    def __init__(self):
        self.head = None
        self.tail = None
Insert at the Front (Prepend)

python
Copy
Edit
def prepend(self, value):
    new_node = DLL_Node(value)
    if not self.head:
        self.head = self.tail = new_node
    else:
        new_node.next = self.head
        self.head.prev = new_node
        self.head = new_node
Insert at the End (Append)

python
Copy
Edit
def append(self, value):
    new_node = DLL_Node(value)
    if not self.head:
        self.head = self.tail = new_node
    else:
        self.tail.next = new_node
        new_node.prev = self.tail
        self.tail = new_node
Remove from Front

python
Copy
Edit
def remove_front(self):
    if not self.head:
        return
    if self.head == self.tail:
        self.head = self.tail = None
    else:
        self.head = self.head.next
        self.head.prev = None
Remove from End

python
Copy
Edit
def remove_end(self):
    if not self.tail:
        return
    if self.head == self.tail:
        self.head = self.tail = None
    else:
        self.tail = self.tail.prev
        self.tail.next = None
Find Value

python
Copy
Edit
def find(self, value):
    current = self.head
    while current:
        if current.data == value:
            return True
        current = current.next
    return False
Length of the List (Iterative)

python
Copy
Edit
def length(self):
    count = 0
    current = self.head
    while current:
        count += 1
        current = current.next
    return count
üîß Advanced Operations on Linked Lists
Singly Linked List (SLL)
Reverse the List

python
Copy
Edit
def reverse(self):
    prev = None
    current = self.head
    while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    self.head = prev
Find the N-th Node from the End (Iterative)

python
Copy
Edit
def nth_from_end(self, n):
    size = self.length()
    current = self.head
    for _ in range(size - n):
        if current:
            current = current.next
    return current.data if current else None
Detect Cycle (Floyd‚Äôs Tortoise and Hare)

python
Copy
Edit
def has_cycle(self):
    slow = fast = self.head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False
Doubly Linked List (DLL)
Reverse the List

python
Copy
Edit
def reverse(self):
    current = self.head
    while current:
        current.prev, current.next = current.next, current.prev
        current = current.prev
    self.head, self.tail = self.tail, self.head
Find the N-th Node from the End (Iterative)

python
Copy
Edit
def nth_from_end(self, n):
    size = self.length()
    current = self.tail
    for _ in range(size - n):
        if current:
            current = current.prev
    return current.data if current else None
Insert After a Given Node

python
Copy
Edit
def insert_after(self, node, value):
    new_node = DLL_Node(value)
    new_node.next = node.next
    if node.next:
        node.next.prev = new_node
    node.next = new_node
    new_node.prev = node
Remove a Specific Node

python
Copy
Edit
def remove_node(self, node):
    if node.prev:
        node.prev.next = node.next
    if node.next:
        node.next.prev = node.prev
    if node == self.head:
        self.head = node.next
    if node == self.tail:
        self.tail = node.prev
Detect Cycle (Using Two Pointers)

python
Copy
Edit
def has_cycle(self):
    slow = fast = self.head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False
These operations cover the basic and advanced methods for working with Singly Linked Lists (SLL) and Doubly Linked Lists (DLL). The reverse, cycle detection, and insertion/removal at specific nodes are some of the advanced techniques you may encounter in your exams or projects.
